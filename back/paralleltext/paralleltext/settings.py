"""
Django settings for paralleltext project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os


def get_secret(key):
    """
    Optain environment variable from presented as Docker secret
    """
    value = os.getenv(key)
    if value is None:
        raise KeyError(f"No variable found: {key}")
    if os.path.isfile(value):
        with open(value, encoding="utf-8") as f:
            value = f.read()

    output = value.strip()
    return output

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

"""
Set up ALLOWED_HOST, DEBUG and SECRET_KEY based on environment variables.
If no enviornment variable for ALLOWED_HOST exists, default to 127.0.0.1.
If no enviornment variable for DEBUG exists, default to True and set ALLOWED_HOSTS to 127.0.0.1.
If no enviornment variable for SECRET_KEY exists, and DEBUG is True 
    set to hard-coded insecure SECRET_KEY.
    Raise error otherwise.
"""

try:
    ALLOWED_HOSTS = [get_secret('ALLOWED_HOSTS')]
except KeyError as e:
    print('No allowed hosts environment variable found, only permit local use')
    ALLOWED_HOSTS = ['127.0.0.1']

try:
    DEBUG = False
    debug_key = get_secret('DEBUG')
    if debug_key == 'True':
        DEBUG = True
except KeyError as e:
    print('No debug environment variable found, only permit local use')
    DEBUG = True
    ALLOWED_HOSTS = ['127.0.0.1']

try:
    SECRET_KEY = get_secret('DJANGO_SECRET_KEY')
except KeyError as e:
    if DEBUG is True:
        SECRET_KEY = 'django-insecure-0izc+il^nt(me64fct3ja#zq!d62j3uak-6=@d8(x-(($s@pro'
    else:
        raise RuntimeError("Could not find valid secret key for production") from e

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'textparser',
    'rest_framework',
    'rest_framework_swagger',
    'drf_yasg'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware'
    ]

ROOT_URLCONF = 'paralleltext.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'paralleltext.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Tallinn'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

if os.getenv("STATIC_ROOT"):
    STATIC_ROOT = os.getenv("STATIC_ROOT")
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080'
]

# Custom variables

try:
    WHITELISTED_ORIGINS = get_secret('WHITELISTED_ORIGINS').split(',')
except KeyError as e:
    print('No whitelisted origins found, only permit local use')
    WHITELISTED_ORIGINS = ['127.0.0.1']
